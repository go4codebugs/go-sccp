// Copyright 2019-2024 go-sccp authors. All rights reserved.
// Use of this source code is governed by a MIT-style license that can be
// found in the LICENSE file.
package params_test

import (
	"io"
	"testing"

	"github.com/pascaldekloe/goe/verify"
	"github.com/wmnsk/go-sccp/params"
)

type serializable interface {
	io.ReadWriter
}

var cases = []struct {
	description string
	structured  serializable
	serialized  []byte
	parseFunc   func([]byte) (serializable, int, error)
}{
	{
		description: "EndOfOptionalParameters",
		structured:  params.NewEndOfOptionalParameters(),
		serialized:  []byte{0x00},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseEndOfOptionalParameters(b)
		},
	}, {
		description: "DestinationLocalReference",
		structured:  params.NewDestinationLocalReference(0x123456),
		serialized:  []byte{0x12, 0x34, 0x56},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseDestinationLocalReference(b)
		},
	}, {
		description: "SourceLocalReference",
		structured:  params.NewSourceLocalReference(0x123456),
		serialized:  []byte{0x12, 0x34, 0x56},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseSourceLocalReference(b)
		},
	}, {
		description: "CalledPartyAddress w/ GlobalTitle",
		structured: params.NewCalledPartyAddress(
			params.NewAddressIndicator(false, true, false, params.GTITTNPESNAI),
			0, 6, // SPC, SSN
			params.NewGlobalTitle(
				params.GTITTNPESNAI,
				params.TranslationType(0),
				params.NPISDNTelephony,
				params.ESBCDOdd,
				params.NAIInternationalNumber,
				[]byte{
					0x21, 0x43, 0x65, 0x87, 0x09,
				},
			),
		),
		serialized: []byte{
			0x0a, 0x12, 0x06, 0x00, 0x11, 0x04, 0x21, 0x43, 0x65, 0x87, 0x09,
		},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseCalledPartyAddress(b)
		},
	}, {
		description: "CallingPartyAddress w/ GlobalTitle",
		structured: params.NewCallingPartyAddress(
			params.NewAddressIndicator(false, true, false, params.GTITTNPESNAI),
			0, 6, // SPC, SSN
			params.NewGlobalTitle(
				params.GTITTNPESNAI,
				params.TranslationType(0),
				params.NPISDNTelephony,
				params.ESBCDOdd,
				params.NAIInternationalNumber,
				[]byte{
					0x21, 0x43, 0x65, 0x87, 0x09,
				},
			),
		),
		serialized: []byte{
			0x0a, 0x12, 0x06, 0x00, 0x11, 0x04, 0x21, 0x43, 0x65, 0x87, 0x09,
		},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseCallingPartyAddress(b)
		},
	}, {
		description: "CalledPartyAddress/2-bytes",
		structured: params.NewCalledPartyAddress(
			params.NewAddressIndicator(false, true, true, params.GTINoGT),
			0, 6, nil, // SPC, SSN, GT
		),
		serialized: []byte{
			0x02, 0x42, 0x06,
		},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseCalledPartyAddress(b)
		},
	}, {
		description: "ProtocolClass/Class 1, no ReturnOnError",
		structured:  params.NewProtocolClass(1, false),
		serialized:  []byte{0x01},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseProtocolClass(b)
		},
	}, {
		description: "ProtocolClass/Class 4, ReturnOnError",
		structured:  params.NewProtocolClass(4, true),
		serialized:  []byte{0x84},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseProtocolClass(b)
		},
	}, {
		description: "SegmentingReassembling/More data",
		structured:  params.NewSegmentingReassembling(true),
		serialized:  []byte{0x01},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseSegmentingReassembling(b)
		},
	}, {
		description: "SegmentingReassembling/No more data",
		structured:  params.NewSegmentingReassembling(false),
		serialized:  []byte{0x00},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseSegmentingReassembling(b)
		},
	}, {
		description: "ReceiveSequenceNumber",
		structured:  params.NewReceiveSequenceNumber(0x76),
		serialized:  []byte{0x76},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseReceiveSequenceNumber(b)
		},
	}, {
		description: "SequencingSegmenting/More data",
		structured:  params.NewSequencingSegmenting(0x76, 0x78, true),
		serialized:  []byte{0x76, 0x79},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseSequencingSegmenting(b)
		},
	}, {
		description: "SequencingSegmenting/No more data",
		structured:  params.NewSequencingSegmenting(0x76, 0x78, false),
		serialized:  []byte{0x76, 0x78},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseSequencingSegmenting(b)
		},
	}, {
		description: "Credit/Fixed",
		structured:  params.NewCredit(0x77),
		serialized:  []byte{0x77},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseCredit(b)
		},
	}, {
		description: "Credit/Optional",
		structured:  params.NewCreditOptional(0x77),
		serialized:  []byte{0x09, 0x01, 0x77},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseCreditOptional(b)
		},
	}, {
		description: "ReleaseCause/Generics",
		structured:  params.NewCause(params.ReleaseCauseSCCPUserOriginated),
		serialized:  []byte{0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseReleaseCause(b)
		},
	}, {
		description: "ReturnCause",
		structured:  params.NewCause(params.ReturnCauseSubsystemFailure),
		serialized:  []byte{0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseReturnCause(b)
		},
	}, {
		description: "ResetCause",
		structured:  params.NewCause(params.ResetCauseMessageOutOfOrderIncorrectReceiveSequenceNumber),
		serialized:  []byte{0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseResetCause(b)
		},
	}, {
		description: "ErrorCause",
		structured:  params.NewCause(params.ErrorCauseServiceClassMismatch),
		serialized:  []byte{0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseErrorCause(b)
		},
	}, {
		description: "RefusalCause",
		structured:  params.NewCause(params.RefusalCauseSCCPUserOriginated),
		serialized:  []byte{0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseRefusalCause(b)
		},
	}, {
		description: "Data/Variable",
		structured:  params.NewData([]byte{0xde, 0xad, 0xbe, 0xef}),
		serialized:  []byte{0x04, 0xde, 0xad, 0xbe, 0xef},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseData(b)
		},
	}, {
		description: "Data/Optional",
		structured:  params.NewDataOptional([]byte{0xde, 0xad, 0xbe, 0xef}),
		serialized:  []byte{0x0f, 0x04, 0xde, 0xad, 0xbe, 0xef},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseDataOptional(b)
		},
	}, {
		description: "Segmentation",
		structured:  params.NewSegmentation(true, 1, 2, 0x123456),
		serialized:  []byte{0x10, 0x04, 0xc2, 0x12, 0x34, 0x56},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseSegmentation(b)
		},
	}, {
		description: "HopCounter/Fixed",
		structured:  params.NewHopCounter(0x03),
		serialized:  []byte{0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseHopCounter(b)
		},
	}, {
		description: "HopCounter/Optional",
		structured:  params.NewHopCounterOptional(0x03),
		serialized:  []byte{0x11, 0x01, 0x03},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseHopCounterOptional(b)
		},
	}, {
		description: "Importance",
		structured:  params.NewImportance(0x07),
		serialized:  []byte{0x12, 0x01, 0x07},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseImportance(b)
		},
	}, {
		description: "LongData/512 bytes",
		structured:  params.NewLongData([]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff}),
		serialized:  []byte{0x02, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff},
		parseFunc: func(b []byte) (serializable, int, error) {
			return params.ParseLongData(b)
		},
	},
}

func TestParams(t *testing.T) {
	t.Helper()

	for _, c := range cases {
		t.Run(c.description, func(t *testing.T) {
			t.Run("Decode", func(t *testing.T) {
				prm, _, err := c.parseFunc(c.serialized)
				if err != nil {
					t.Fatal(err)
				}

				if got, want := prm, c.structured; !verify.Values(t, "", got, want) {
					t.Errorf("got: %v, want: %v", got, want)
				}
			})

			t.Run("Serialize", func(t *testing.T) {
				b := make([]byte, len(c.serialized))
				if _, err := c.structured.Write(b); err != nil {
					t.Fatal(err)
				}

				if got, want := b, c.serialized; !verify.Values(t, "", got, want) {
					t.Errorf("got: %v, want: %v", got, want)
				}
			})
		})
	}
}
