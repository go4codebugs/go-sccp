// Code generated by "stringer -type ParameterNameCode,ParameterType,ReleaseCauseValue,ReturnCauseValue,ResetCauseValue,ErrorCauseValue,RefusalCauseValue,GlobalTitleIndicator,NatureOfAddressIndicator,NumberingPlan,EncodingScheme -linecomment -output constant_string.go"; DO NOT EDIT.

package params

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PCodeEndOfOptionalParameters-0]
	_ = x[PCodeDestinationLocalReference-1]
	_ = x[PCodeSourceLocalReference-2]
	_ = x[PCodeCalledPartyAddress-3]
	_ = x[PCodeCallingPartyAddress-4]
	_ = x[PCodeProtocolClass-5]
	_ = x[PCodeSegmentingReassembling-6]
	_ = x[PCodeReceiveSequenceNumber-7]
	_ = x[PCodeSequencingSegmenting-8]
	_ = x[PCodeCredit-9]
	_ = x[PCodeReleaseCause-10]
	_ = x[PCodeReturnCause-11]
	_ = x[PCodeResetCause-12]
	_ = x[PCodeErrorCause-13]
	_ = x[PCodeRefusalCause-14]
	_ = x[PCodeData-15]
	_ = x[PCodeSegmentation-16]
	_ = x[PCodeHopCounter-17]
	_ = x[PCodeImportance-18]
	_ = x[PCodeLongData-19]
}

const _ParameterNameCode_name = "End of optional parametersDestination local referenceSource local referenceCalled party addressCalling party addressProtocol classSegmenting/reassemblingReceive sequence numberSequencing/segmentingCreditRelease causeReturn causeReset causeError causeRefusal causeDataSegmentationHop CounterImportanceLong data"

var _ParameterNameCode_index = [...]uint16{0, 26, 53, 75, 95, 116, 130, 153, 176, 197, 203, 216, 228, 239, 250, 263, 267, 279, 290, 300, 309}

func (i ParameterNameCode) String() string {
	if i >= ParameterNameCode(len(_ParameterNameCode_index)-1) {
		return "ParameterNameCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ParameterNameCode_name[_ParameterNameCode_index[i]:_ParameterNameCode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PTypeF-0]
	_ = x[PTypeV-1]
	_ = x[PTypeO-2]
}

const _ParameterType_name = "FVO"

var _ParameterType_index = [...]uint8{0, 1, 2, 3}

func (i ParameterType) String() string {
	if i >= ParameterType(len(_ParameterType_index)-1) {
		return "ParameterType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ParameterType_name[_ParameterType_index[i]:_ParameterType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReleaseCauseEndUserOriginated-0]
	_ = x[ReleaseCauseEndUserCongestion-1]
	_ = x[ReleaseCauseEndUserFailure-2]
	_ = x[ReleaseCauseSCCPUserOriginated-3]
	_ = x[ReleaseCauseRemoteProcedureError-4]
	_ = x[ReleaseCauseInconsistentConnectionData-5]
	_ = x[ReleaseCauseAccessFailure-6]
	_ = x[ReleaseCauseAccessCongestion-7]
	_ = x[ReleaseCauseSubsystemFailure-8]
	_ = x[ReleaseCauseSubsystemCongestion-9]
	_ = x[ReleaseCauseMTPFailure-10]
	_ = x[ReleaseCauseNetworkCongestion-11]
	_ = x[ReleaseCauseExpirationOfResetTimer-12]
	_ = x[ReleaseCauseExpirationOfReceiveInactivityTimer-13]
	_ = x[ReleaseCauseUnqualified-15]
	_ = x[ReleaseCauseSCCPFailure-16]
}

const (
	_ReleaseCauseValue_name_0 = "end user originatedend user congestionend user failureSCCP user originatedremote procedure errorinconsistent connection dataaccess failureaccess congestionsubsystem failuresubsystem congestionMTP failurenetwork congestionexpiration of reset timerexpiration of receive inactivity timer"
	_ReleaseCauseValue_name_1 = "unqualifiedSCCP failure"
)

var (
	_ReleaseCauseValue_index_0 = [...]uint16{0, 19, 38, 54, 74, 96, 124, 138, 155, 172, 192, 203, 221, 246, 284}
	_ReleaseCauseValue_index_1 = [...]uint8{0, 11, 23}
)

func (i ReleaseCauseValue) String() string {
	switch {
	case i <= 13:
		return _ReleaseCauseValue_name_0[_ReleaseCauseValue_index_0[i]:_ReleaseCauseValue_index_0[i+1]]
	case 15 <= i && i <= 16:
		i -= 15
		return _ReleaseCauseValue_name_1[_ReleaseCauseValue_index_1[i]:_ReleaseCauseValue_index_1[i+1]]
	default:
		return "ReleaseCauseValue(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReturnCauseNoTranslationForAnAddressOfSuchNature-0]
	_ = x[ReturnCauseNoTranslationForThisSpecificAddress-1]
	_ = x[ReturnCauseSubsystemCongestion-2]
	_ = x[ReturnCauseSubsystemFailure-3]
	_ = x[ReturnCauseUnequippedUser-4]
	_ = x[ReturnCauseMTPFailure-5]
	_ = x[ReturnCauseNetworkCongestion-6]
	_ = x[ReturnCauseUnqualified-7]
	_ = x[ReturnCauseErrorInMessageTransport-8]
	_ = x[ReturnCauseErrorInLocalProcessing-9]
	_ = x[ReturnCauseDestinationCannotPerformReassembly-10]
	_ = x[ReturnCauseSCCPFailure-11]
	_ = x[ReturnCauseHopCounterViolation-12]
	_ = x[ReturnCauseSegmentationNotSupported-13]
	_ = x[ReturnCauseSegmentationFailure-14]
}

const _ReturnCauseValue_name = "no translation for an address of such natureno translation for this specific addresssubsystem congestionsubsystem failureunequipped userMTP failurenetwork congestionunqualifiederror in message transporterror in local processingdestination cannot perform reassemblySCCP failurehop counter violationsegmentation not supportedsegmentation failure"

var _ReturnCauseValue_index = [...]uint16{0, 44, 84, 104, 121, 136, 147, 165, 176, 202, 227, 264, 276, 297, 323, 343}

func (i ReturnCauseValue) String() string {
	if i >= ReturnCauseValue(len(_ReturnCauseValue_index)-1) {
		return "ReturnCauseValue(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ReturnCauseValue_name[_ReturnCauseValue_index[i]:_ReturnCauseValue_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ResetCauseEndUserOriginated-0]
	_ = x[ResetCauseSCCPUserOriginated-1]
	_ = x[ResetCauseMessageOutOfOrderIncorrectSendSequenceNumber-2]
	_ = x[ResetCauseMessageOutOfOrderIncorrectReceiveSequenceNumber-3]
	_ = x[ResetCauseRemoteProcedureErrorMessageOutOfWindow-4]
	_ = x[ResetCauseRemoteProcedureErrorIncorrectSendSequenceNumberAfterReinitialization-5]
	_ = x[ResetCauseRemoteProcedureErrorGeneral-6]
	_ = x[ResetCauseRemoteEndUserOperational-7]
	_ = x[ResetCauseNetworkOperational-8]
	_ = x[ResetCauseAccessOperational-9]
	_ = x[ResetCauseNetworkCongestion-10]
	_ = x[ResetCauseUnqualified-12]
}

const (
	_ResetCauseValue_name_0 = "end user originatedSCCP user originatedmessage out of order - incorrect P(S)message out of order - incorrect P(R)remote procedure error - message out of windowremote procedure error - incorrect P(S) after (re)initializationremote procedure error - generalremote end user operationalnetwork operationalaccess operationalnetwork congestion"
	_ResetCauseValue_name_1 = "unqualified"
)

var (
	_ResetCauseValue_index_0 = [...]uint16{0, 19, 39, 76, 113, 159, 223, 255, 282, 301, 319, 337}
)

func (i ResetCauseValue) String() string {
	switch {
	case i <= 10:
		return _ResetCauseValue_name_0[_ResetCauseValue_index_0[i]:_ResetCauseValue_index_0[i+1]]
	case i == 12:
		return _ResetCauseValue_name_1
	default:
		return "ResetCauseValue(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ErrorCauseLocalReferenceNumberMismatchUnassignedDestinationLRN-0]
	_ = x[ErrorCauseLocalReferenceNumberMismatchInconsistentSourceLRN-1]
	_ = x[ErrorCausePointCodeMismatch-2]
	_ = x[ErrorCauseServiceClassMismatch-3]
	_ = x[ErrorCauseUnqualified-4]
}

const _ErrorCauseValue_name = "local reference number (LRN) mismatch - unassigned destination LRNlocal reference number (LRN) mismatch - inconsistent source LRNpoint code mismatchservice class mismatchunqualified"

var _ErrorCauseValue_index = [...]uint8{0, 66, 129, 148, 170, 181}

func (i ErrorCauseValue) String() string {
	if i >= ErrorCauseValue(len(_ErrorCauseValue_index)-1) {
		return "ErrorCauseValue(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ErrorCauseValue_name[_ErrorCauseValue_index[i]:_ErrorCauseValue_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RefusalCauseEndUserOriginated-0]
	_ = x[RefusalCauseEndUserCongestion-1]
	_ = x[RefusalCauseEndUserFailure-2]
	_ = x[RefusalCauseSCCPUserOriginated-3]
	_ = x[RefusalCauseDestinationAddressUnknown-4]
	_ = x[RefusalCauseDestinationInaccessible-5]
	_ = x[RefusalCauseNetworkResourceQoSNotAvailableNonTransient-6]
	_ = x[RefusalCauseNetworkResourceQoSNotAvailableTransient-7]
	_ = x[RefusalCauseAccessFailure-8]
	_ = x[RefusalCauseAccessCongestion-9]
	_ = x[RefusalCauseSubsystemFailure-10]
	_ = x[RefusalCauseSubsystemCongestion-11]
	_ = x[RefusalCauseExpirationOfTheConnectionEstablishmentTimer-12]
	_ = x[RefusalCauseIncompatibleUserData-13]
	_ = x[RefusalCauseUnqualified-15]
	_ = x[RefusalCauseHopCounterViolation-16]
	_ = x[RefusalCauseSCCPFailure-17]
	_ = x[RefusalCauseNoTranslationForAnAddressOfSuchNature-18]
	_ = x[RefusalCauseUnequippedUser-19]
}

const (
	_RefusalCauseValue_name_0 = "end user originatedend user congestionend user failureSCCP user originateddestination address unknowndestination inaccessiblenetwork resource - QoS not available/non-transientnetwork resource - QoS not available/transientaccess failureaccess congestionsubsystem failuresubsystem congestionexpiration of the connection establishment timerincompatible user data"
	_RefusalCauseValue_name_1 = "unqualifiedhop counter violationSCCP failureno translation for an address of such natureunequipped user"
)

var (
	_RefusalCauseValue_index_0 = [...]uint16{0, 19, 38, 54, 74, 101, 125, 175, 221, 235, 252, 269, 289, 337, 359}
	_RefusalCauseValue_index_1 = [...]uint8{0, 11, 32, 44, 88, 103}
)

func (i RefusalCauseValue) String() string {
	switch {
	case i <= 13:
		return _RefusalCauseValue_name_0[_RefusalCauseValue_index_0[i]:_RefusalCauseValue_index_0[i+1]]
	case 15 <= i && i <= 19:
		i -= 15
		return _RefusalCauseValue_name_1[_RefusalCauseValue_index_1[i]:_RefusalCauseValue_index_1[i+1]]
	default:
		return "RefusalCauseValue(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GTINoGT-0]
	_ = x[GTINAIOnly-1]
	_ = x[GTITTOnly-2]
	_ = x[GTITTNPES-3]
	_ = x[GTITTNPESNAI-4]
}

const _GlobalTitleIndicator_name = "no global title includedglobal title includes nature of address indicator onlyglobal title includes translation type onlyglobal title includes translation type, numbering plan, and encoding schemeglobal title includes translation type, numbering plan, encoding scheme, and nature of address indicator"

var _GlobalTitleIndicator_index = [...]uint16{0, 24, 78, 121, 196, 300}

func (i GlobalTitleIndicator) String() string {
	if i >= GlobalTitleIndicator(len(_GlobalTitleIndicator_index)-1) {
		return "GlobalTitleIndicator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GlobalTitleIndicator_name[_GlobalTitleIndicator_index[i]:_GlobalTitleIndicator_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NAIUnknown-0]
	_ = x[NAISubscriberNumber-1]
	_ = x[NAINationalSignificantNumber-3]
	_ = x[NAIInternationalNumber-4]
}

const (
	_NatureOfAddressIndicator_name_0 = "unknownsubscriber number"
	_NatureOfAddressIndicator_name_1 = "national significant numberinternational number"
)

var (
	_NatureOfAddressIndicator_index_0 = [...]uint8{0, 7, 24}
	_NatureOfAddressIndicator_index_1 = [...]uint8{0, 27, 47}
)

func (i NatureOfAddressIndicator) String() string {
	switch {
	case i <= 1:
		return _NatureOfAddressIndicator_name_0[_NatureOfAddressIndicator_index_0[i]:_NatureOfAddressIndicator_index_0[i+1]]
	case 3 <= i && i <= 4:
		i -= 3
		return _NatureOfAddressIndicator_name_1[_NatureOfAddressIndicator_index_1[i]:_NatureOfAddressIndicator_index_1[i+1]]
	default:
		return "NatureOfAddressIndicator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NPUnknown-0]
	_ = x[NPISDNTelephony-1]
	_ = x[NPGeneric-2]
	_ = x[NPData-3]
	_ = x[NPTelex-4]
	_ = x[NPMaritimeMobile-5]
	_ = x[NPLandMobile-6]
	_ = x[NPISDNMobile-7]
	_ = x[NPPrivate-14]
}

const (
	_NumberingPlan_name_0 = "unknownISDN/telephony numbering plangeneric numbering plandata numbering plantelex numbering planmaritime mobile numbering planland mobile numbering planISDN/mobile numbering plan"
	_NumberingPlan_name_1 = "private network or network-specific numbering plan"
)

var (
	_NumberingPlan_index_0 = [...]uint8{0, 7, 36, 58, 77, 97, 127, 153, 179}
)

func (i NumberingPlan) String() string {
	switch {
	case i <= 7:
		return _NumberingPlan_name_0[_NumberingPlan_index_0[i]:_NumberingPlan_index_0[i+1]]
	case i == 14:
		return _NumberingPlan_name_1
	default:
		return "NumberingPlan(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ESUnknown-0]
	_ = x[ESBCDOdd-1]
	_ = x[ESBCDEven-2]
	_ = x[ESNationalSpecific-3]
}

const _EncodingScheme_name = "unknownBCD, odd number of digitsBCD, even number of digitsnational specific"

var _EncodingScheme_index = [...]uint8{0, 7, 32, 58, 75}

func (i EncodingScheme) String() string {
	if i >= EncodingScheme(len(_EncodingScheme_index)-1) {
		return "EncodingScheme(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _EncodingScheme_name[_EncodingScheme_index[i]:_EncodingScheme_index[i+1]]
}
